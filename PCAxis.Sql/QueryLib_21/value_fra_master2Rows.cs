using System;
using System.Data;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Xml.XPath;
using System.Globalization;

using PCAxis.Sql.DbConfig;

//This code is generated by master2Rows.xslt. Nope!

namespace PCAxis.Sql.QueryLib_21 {


    #region class   Value
    /// <summary> 
    /// Holds a list of ValueRows. 
    /// </summary> 
    public class ValueRowDictionary {
        // One entry in the Dictionary for each ValueCode
        private Dictionary<string, ValueRow2> mValueRows = new Dictionary<string, ValueRow2>();
        public Dictionary<string, ValueRow2> ValueRows {
            get { return mValueRows; }
            set { mValueRows = value; }
        }
        public ValueRowDictionary(DataTable mTable, SqlDbConfig_21 dbconf, string metaModel) {
            string theValueCode;
            string theLanguage;
            int sortOrder = 0;
            foreach (DataRow mRow in mTable.Rows) {
                theValueCode = mRow[dbconf.VSValue.ValueCode].ToString();
                if (!mValueRows.ContainsKey(theValueCode))
                {
                    sortOrder += 1;  // this will be the sortorder for mainlanguage.  Since each language could have its own sortorder this well be set in the Valuetext and coukd be used by the calling program.
                    mValueRows.Add(theValueCode, new ValueRow2(mRow, dbconf, metaModel, sortOrder));
                } //denne bør fel flyttes et par hakk ned
                    theLanguage = mRow["Language"].ToString();
                if (!mValueRows[theValueCode].texts.ContainsKey(theLanguage))
                {
                    mValueRows[theValueCode].texts.Add(theLanguage, new ValueText2(mRow, dbconf, metaModel));
                }
            }
        }
    }


    /// <summary> 
    /// Holds the  attributes for Value. The language dependent parts are stored in the texts dictionary which is indexed by language code. 
    /// </summary> 
    public class ValueRow {

        private String mValuePool;
        public String ValuePool {
            get { return mValuePool; }
        }

        private String mValueCode;
        public String ValueCode {
            get { return mValueCode; }
        }
        
       
        public Dictionary<string, ValueText> texts = new Dictionary<string, ValueText>();


        public ValueRow(DataRow mRow, SqlDbConfig_21 dbconf, IMetaVersionComparator metaModel,StringCollection languageCodes,int sortOrder)
        {
            this.mValuePool = mRow[dbconf.Value.ValuePoolCol.Label()].ToString();
            this.mValueCode = mRow[dbconf.Value.ValueCodeCol.Label()].ToString();  
            foreach (string languageCode in languageCodes) {
                texts.Add(languageCode, new ValueText(mRow, dbconf, languageCode, metaModel));
            }
        }

    }

    /// <summary> 
    /// Holds the language dependent attributes for Value for one language  
    /// </summary> 
    public class ValueText
    {
        private String mValueTextS;
        public String ValueTextS
        {
            get { return mValueTextS; }
        }
        private String mValueTextL;
        public String ValueTextL
        {
            get { return mValueTextL; }
        }

        private String mSortCode;
        public String SortCode
        {
            get { return mSortCode; }
        }

        internal ValueText(DataRow mRow, SqlDbConfig_21 dbconf,  String languageCode, IMetaVersionComparator metaModel)
        {
            {
                if (dbconf.isSecondaryLanguage(languageCode))
                {
                    this.mValueTextS = mRow[dbconf.ValueLang2.ValueTextSCol.Label(languageCode)].ToString();
                    this.mValueTextL = mRow[dbconf.ValueLang2.ValueTextLCol.Label(languageCode)].ToString();
                    this.mSortCode = mRow[dbconf.ValueLang2.SortCodeCol.Label(languageCode)].ToString();

                } else
                {
                    this.mValueTextS = mRow[dbconf.Value.ValueTextSCol.Label()].ToString();
                    this.mValueTextL = mRow[dbconf.Value.ValueTextLCol.Label()].ToString();
                    this.mSortCode = mRow[dbconf.Value.SortCodeCol.Label()].ToString();
                }
            }
        }
    }


    public class ValueRow2 {
        private String mValuePool;
        public String ValuePool {
            get { return mValuePool; }
        }
        private String mValueSet;
        public String ValueSet
        {
            get { return mValueSet; }
        }
        private String mValueCode;
        public String ValueCode {
            get { return mValueCode; }
        }
        private String mSortOrder;
       public String SortOrder {
           get { return mSortOrder; }
        }
        private String mFootnote;
        public String Footnote {
            get { return mFootnote; }
        }
        public Dictionary<string, ValueText2> texts = new Dictionary<string, ValueText2>();

        public ValueRow2(DataRow mRow, SqlDbConfig_21 dbconf, string metaModel,int sortOrder) {
            this.mValuePool = mRow[dbconf.VSValue.ValuePool].ToString(); // VAL_Vardeforrad
            this.mValueSet = mRow[dbconf.VSValue.ValueSet].ToString(); // VAL_Vardemangd
            this.mValueCode = mRow[dbconf.VSValue.ValueCode].ToString();
            this.mSortOrder = sortOrder.ToString();
            this.mFootnote = null;
        }
    }


    /// <summary> 
    /// Holds the language dependent attributes for Value for one language  
    /// </summary> 
    public class ValueText2 {
        private String mSortCodeValue;
        public String SortCodeValue
        {
            get { return mSortCodeValue; }
        }
        private String mSortCodeVsValue;
        public String SortCodeVsValue
        {
            get { return mSortCodeVsValue; }
        }
        private String mValueTextS;
        public String ValueTextS {
            get { return mValueTextS; }
        }
        private String mValueTextL;
        public String ValueTextL {
            get { return mValueTextL; }
        }

        internal ValueText2(DataRow mRow, SqlDbConfig_21 dbconf, string metaModel) {
            this.mSortCodeValue = mRow["SortCodeValue"].ToString();
            this.mSortCodeVsValue = mRow["SortCodeVsValue"].ToString();
            this.mValueTextS = mRow[dbconf.Value.ValueTextS].ToString();
            this.mValueTextL = mRow[dbconf.Value.ValueTextL].ToString();
        }
    }


    #endregion Value


}
